"use strict";(self.webpackChunkobraplaydocs=self.webpackChunkobraplaydocs||[]).push([[9438],{3905:function(e,t,o){o.d(t,{Zo:function(){return l},kt:function(){return p}});var a=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function n(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,a,r=function(e,t){if(null==e)return{};var o,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)o=s[a],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)o=s[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var d=a.createContext({}),u=function(e){var t=a.useContext(d),o=t;return e&&(o="function"==typeof e?e(t):n(n({},t),e)),o},l=function(e){var t=u(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var o=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=u(o),p=r,f=c["".concat(d,".").concat(p)]||c[p]||m[p]||s;return o?a.createElement(f,n(n({ref:t},l),{},{components:o})):a.createElement(f,n({ref:t},l))}));function p(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=o.length,n=new Array(s);n[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,n[1]=i;for(var u=2;u<s;u++)n[u]=o[u];return a.createElement.apply(null,n)}return a.createElement.apply(null,o)}c.displayName="MDXCreateElement"},482:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return i},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return l},default:function(){return c}});var a=o(7462),r=o(3366),s=(o(7294),o(3905)),n=["components"],i={},d="Testes",u={unversionedId:"onboarding/tests",id:"onboarding/tests",title:"Testes",description:"Testar software \xe9 imprescind\xedvel pois devemos garantir que a resposta do software \xe9 igual ao que gostar\xedamos que ele estivesse fazendo. geralmente para o software funcionar bem ele tem que ter uma cobertura de testes bem elevada acima de 90%. Sendo  assim vamos tentar testar todos os m\xf3dulos, classes, m\xe9todos, linhas de c\xf3digo a fim de que tenhamos a garantia de que o software se comporta como deveria.",source:"@site/docs/onboarding/tests.md",sourceDirName:"onboarding",slug:"/onboarding/tests",permalink:"/docs/onboarding/tests",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/onboarding/tests.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mindset do \xf3timo desenvolvedor",permalink:"/docs/onboarding/mindset"}},l=[{value:"TDD",id:"tdd",children:[],level:2},{value:"BDD",id:"bdd",children:[],level:2},{value:"Testes unit\xe1rios",id:"testes-unit\xe1rios",children:[],level:2},{value:"Testes de integra\xe7\xe3o",id:"testes-de-integra\xe7\xe3o",children:[],level:2},{value:"Testes end-to-end",id:"testes-end-to-end",children:[],level:2},{value:"Testes de UI",id:"testes-de-ui",children:[],level:2},{value:"Mais informa\xe7\xf5es",id:"mais-informa\xe7\xf5es",children:[],level:2}],m={toc:l};function c(e){var t=e.components,o=(0,r.Z)(e,n);return(0,s.kt)("wrapper",(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"testes"},"Testes"),(0,s.kt)("p",null,"Testar software \xe9 imprescind\xedvel pois devemos garantir que a resposta do software \xe9 igual ao que gostar\xedamos que ele estivesse fazendo. geralmente para o software funcionar bem ele tem que ter uma cobertura de testes bem elevada acima de 90%. Sendo  assim vamos tentar testar todos os m\xf3dulos, classes, m\xe9todos, linhas de c\xf3digo a fim de que tenhamos a garantia de que o software se comporta como deveria."),(0,s.kt)("h2",{id:"tdd"},"TDD"),(0,s.kt)("p",null,"o teste driven development \xe9 uma metodologia de programa\xe7\xe3o na qual primeiramente vamos fazer o teste e somente ap\xf3s vamos programar. utilizando o tdd ganhamos na cobertura de teste que ser\xe1 muito elevada basicamente 100% e evitamos retrabalho.\nh\xe1 Tr\xeas Passos principais para o tdd."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"escrever um teste e observar que o teste falha"),(0,s.kt)("li",{parentName:"ol"},"fazer um algoritmo at\xe9 que o teste passe"),(0,s.kt)("li",{parentName:"ol"},"refatorar o c\xf3digo")),(0,s.kt)("p",null,"observamos que o tdd pode ser muito custoso na pr\xe1tica por\xe9m atinge \xf3timos resultados"),(0,s.kt)("h2",{id:"bdd"},"BDD"),(0,s.kt)("p",null,"o behavior driven development \xe9 uma metodologia de programa\xe7\xe3o na qual priorizamos o comportamento do software para a l\xf3gica de neg\xf3cios. utilizar o bdd garante que o software ir\xe1 funcionar para aquilo que ele \xe9 constru\xeddo por\xe9m pode n\xe3o ter cobertura de c\xf3digo muito elevada e n\xe3o prioriza comportamentos particulares."),(0,s.kt)("h2",{id:"testes-unit\xe1rios"},"Testes unit\xe1rios"),(0,s.kt)("p",null,"testes unit\xe1rios ou testes de unidade s\xe3o testes que v\xe3o colocar a prova a menor unidade de programa\xe7\xe3o do sistema.\ngeralmente vamos testar fus\xf5es ou m\xe9todos sendo assim comparamos o resultado da sa\xedda da fun\xe7\xe3o ou m\xe9todo com o resultado esperado"),(0,s.kt)("h2",{id:"testes-de-integra\xe7\xe3o"},"Testes de integra\xe7\xe3o"),(0,s.kt)("p",null,"teste de integra\xe7\xe3o s\xe3o testes que integram v\xe1rias partes do sistema e s\xe3o muito importantes para garantir. Nesse tipo de teste vamos integrar v\xe1rias partes do sistema por exemplo o servidor web com um banco de dados. um pequeno exemplo seria fazer um teste que inicializa uma conex\xe3o com o banco de dados e observar aqui o resultado criado e escrito no banco de dados \xe9 realmente o esperado"),(0,s.kt)("h2",{id:"testes-end-to-end"},"Testes end-to-end"),(0,s.kt)("p",null,"Testes and to end s\xe3o testes que v\xe3o analisar toda a cadeia do software ou seja v\xe3o testar toda a integralidade do sistema. S\xe3o testes que \xe0s vezes podem falhar facilmente e exigem muito tempo pois v\xe3o testar toda a integralidade do sistema. s\xf3 um teste muito custosos"),(0,s.kt)("h2",{id:"testes-de-ui"},"Testes de UI"),(0,s.kt)("p",null,"Teste de UI s\xe3o testes em que vamos observar o comportamento dos componentes da nossa interface de usu\xe1rio. basicamente queremos saber se o ciclo de vida do componente \xe9 obedecido de forma correta e se a renderiza\xe7\xe3o acontece corretamente"),(0,s.kt)("h2",{id:"mais-informa\xe7\xf5es"},"Mais informa\xe7\xf5es"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://dayvsonlima.medium.com/entenda-de-uma-vez-por-todas-o-que-s%C3%A3o-testes-unit%C3%A1rios-para-que-servem-e-como-faz%C3%AA-los-2a6f645bab3"},"Entenda de uma vez por todas o que s\xe3o testes unit\xe1rios, para que servem e como faz\xea-los")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://martinfowler.com/articles/practical-test-pyramid.html#UiTests"},"The Practical Test Pyramid")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"http://www.obeythetestinggoat.com/pages/book.html#toc"},"TDD for the Web, with Python, Selenium, Django, JavaScript and pals..."))))}c.isMDXComponent=!0}}]);